using AdventOfCode.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AdventOfCode.Year2019
{


    class Day18
    {
        #region Input
        const string Input = @"
#################################################################################
#...#..j..........#.........#...........#.......#........n......#.....#........m#
#.#.#.#.###########.###.#####.#######O#####.###.#.#########.#.###.#.###.###.###.#
#.#.#.#...............#.Z.......#...#...#...#.#.#.#.......#.#.....#.....#.X.#...#
#.#.#.###########################P#.#.#.#.###.#.###.#####.###.###########.###.###
#.#.#.#.......#.........#......b..#.#.#.#.#.......#...#.#...#.....#.......#.....#
#.#.#.#.###.###.#######.#.#########.###.#.#######.###.#.###.#####.#.#############
#.#.#.#.#...#...#..l#...#.#.......#.#...#.....#.......#.#...#.....#.........#..k#
#.###.#.###.#.#####.#.###.#######.#.#.###.###.#########.#.###.#####.#######.#.#.#
#...#.#...#.#.#...#...#...#.....#.#...#.#...#...#.....#.#.#...#...#...#...#...#.#
#.#.#.#.#.###.#.#U###.###.#.###.#.#####.###.###.#.###.#.#.#.###.#.#####.#.#####F#
#.#.#.#.#...#...#...#.....#.#...#.......#...#g#...#.#.#...#.#...#...#.E.#.....#.#
#.#.#.#.###.#######.#######.###.###Y#.###.###.#####.#.###.###.#####.#.#######.#.#
#.#...#...#...#.....#......a..#...#.#...#.....#.....#...#.....#.......#.....#...#
#.#####D#####.#.#######.#####.###.###.#.#####.#.###.###.#################.#####.#
#.M...#.#...#.#.#c....#...#...#.#...#.#.#...#.#.#.#.#.#.#...............#...#...#
#####.###.#.#.#H#.###.#####.###.###.#.#.#.###.#.#.#.#.#.#.###########.#.###.#.###
#...#.....#.#.#.#...#...#...#.....#.#.#.#...#.#.#.....#.......#.....#.#.#...#.#.#
#.#.#######.#.#.#.#####.#.###.#.###.###.#.#.#.#.#####.#########.###.###.#.###.#.#
#.#.#....x#.#.#...#.....#.#...#.#..i#...#.#.#.#...#...#.........#.....#.#...#...#
#.###K#.#.#.#.#####.#####.#.###.#.###.#####.#.###.#####.###.#########.#.#.#.###.#
#...#.#.#.#.#.....#..r#...#...#.#.#.....#...#.....#.....#...#.......#...#.#.....#
#.#.#.#.###.#.###.#####.#####.#.#.#.###.#.#####.###.#####.#########.#####.#####.#
#.#.#.#.....#.#.........#.....#.#.#...#.#.......#...#...#.#.........#.....#...#.#
###.#.#########.#########.#####.#.#####.#####.###.#.#.#.###.#########.#####.#.#.#
#...#...#.....#.#...........#...#.....#.#..t#.#.#.#.#.#.....#...#.........#.#.#.#
#.#####.#.#.#.#.#####.#####.#########.#.#.#.#.#.#.#.#.#######.###.#########.#.###
#.......#.#.#.#.....#...#.#.....#...#.#.#.#.#...#.#.#.....#.......#...#...#.#...#
#.#########.#.###.#.###.#.#####.#.#.#.#.#.#.#####.#.#####.#########.#.#.#.#.###.#
#.#.....#...#...#.#.#...#...#...#.#...#.#.#.......#.#...#.......#q..#...#...#...#
#.###.#.#.#####.###.###.#.###.###.#####.#.#########.###.#######.#.###########.###
#.....#.#...#.#...#...#.#...#...#...#...#...#...#.#.....#.......#.#...#.....#...#
#######.#.#.#.###.#.#.#.###.###.###.###.#.#.#.#.#.#####.#.#######.#.###.#.#####.#
#.....#.#.#.#.....#.#.#.......#...#.....#.#.#.#.#.#.....#.#...#...#...#.#.....#.#
#.#.###.#.#.###.#####.#####.###.#.#####.#.#.#.#.#.#.#####.#.#.#.#####.#.#####.#.#
#.#.#...#.#...#.#...#.#.....#...#...#...#.#...#.#...#...#...#...#.....#.#.....#.#
###.#.###.###.#.#.#.#.#######.#######.###.#####.#.###.#.#########.#.###.#.###.#.#
#...#.#...#...#.#.#.#...#.....#.....#.#.#.#...#.#.#...#.......#...#.....#...#.#.#
#.###.#####.###.#.#.###.#.#####.###.#.#.#.###.#.###.#######.###.###########.###.#
#...........#.....#.....#.........#...........#...........#...............#w....#
#######################################.@.#######################################
#.....#.....#.......#.........#...................#.#...................#...#...#
#.###.###.#.#.#####.#.#.#####.#.#####.#.#.#######.#.#.###############.#.#.#.#.#.#
#...#.....#...#.#...#.#...#.#.#.#.#...#.#.......#...#...#...#...#...#.#...#...#.#
###.#####.#####.#.#######.#.#.#.#.#.###.#.#####.###.###.#.###.#.#.#.#.#########.#
#...#...#.#...#.#.....#...#...#...#...#.#.#...#...#.#...#.#...#...#.#.........#.#
#.###.#.###.#.#.#####.#.###.#########.#.#.###.###.###.###.#.#######.###########.#
#.....#.....#.#.....#...#.#.#.......#.#.#.......#.....#...#.#...................#
#############.#####.#####.#.#.#####.#.#.#######.#######.#.#.###.###############.#
#...........#.....#.......#.#...#.#.#.#.#.....#.........#.#...#.#.........#...#.#
#########.#.#####.#.###.###.###.#.#.#.###.#.#.#######T#######.###.#######.#.###.#
#........f#.#...#.#...#.....#...#...#...#.#.#.#.....#.#.......#...#...#...#.#...#
#.#######.###.#.#.#####.#####.###.#####.#.#.#.#.###.#.#.#######.#####.#.###.#.###
#.#.#.....#...#.#.....#.......#...#.....#.#.#.#.#.#...#.#...#.......#.#.#.......#
#.#.#.#####.###.#.###.#########.###.#.###.#.###.#.#####.#.#.#.#####.#.#.#######.#
#.#.#...#...#.#.#...#.#...#...#.#.#.#...#.#...#.#...#...#.#...#...#...#.#.....#.#
#.#.###.#.###.#.###.#.###.#.#.#.#.#.###.#####.#.#.#.#.###.#####.#.#####.#.###.#.#
#.#.....#.#...#...#.#...#...#.#.#...#.#.#.....#.#.#.#.......#...#.#...#....s#.#v#
#.#.#####.#.#.###.###.#.#.###.#.###.#.#.#.#####.###.#####.###.###.#.#.#######.#.#
#.#...#...#.#...#...#.#.#...#.#...#..y#.#.#.........#...#.#...#.....#.........#.#
#.###.#.#######.###.###.#####.###.#####.#.#.#####.###.#.###.#########.###########
#.#...#.........#.#...#.....#...#.#.....#...#...#.#...#...#.#.......#.#.........#
#.#.###########.#.#########.#.###.#.#########.#.#.#.#####.#.#######R###.#######.#
#.#.#.....Q...#...#.........#...#.#.#...#...#.#.#.#.#...#.....#...#.....#...#.C.#
#.###.#.#########.#.###.#######.#.#.#.#.#.#.#.#.#.#.###.#####.#.#.#########.#.###
#...#.#...#...G.#.#...#.#.#.....#.#...#.#.#.#.#.#.#...#...#...#.#.....#.....#.#.#
#.#.#.###.#.###.#.#####.#.#.#.###.#####.#.#.#.#.#.###.#.#.#.#####.###.#.#####.#.#
#.#.#...#.#.#...#.#.....#.#.#.#...#...I.#.#...#.#...#.#.#.#.#.....#.#...#...#...#
#.#S###.#.#.#.#.#.#.#####.#.#.#.###.###.#.#####.#####.#.#.#.###.###.###.#.#.###.#
#.#.....#...#.#.#...#.......#...#...#.#.#.....#.......#.#.#...#.#.#...#.#.#.....#
#.###########.#######.###########.###.#.#.###.#########.#.###.#.#.#.#.#.#.#######
#e#.......#...#.....#.#.......#...#.#...#.#...#...#.#...#.......#...#...#.#.....#
#.#.#######.#.#.#.###.#.###.###.#.#.#.###N#.###.#.#.#.#########.#####.###.#.###.#
#.#.#.......#.#.#.....#...#.#...#.#.....#.#.#...#.#.#.#..p..#...#...#...#h..#.#.#
#.#.#.#########W#########.#.#.###.#####.###.#.###.#.#.#.###.#####.#B#########.#.#
#...#d....#...#.....#...#.#.....#.....#.#...#.#.#.#.#.#...#.#.....#.#.......#...#
###.#####.#.#.#####.#.#.###.#######.#.#.#.###.#.#.#.#.###.#.#.#####.#.#####.#.###
#...#...#...#.....#...#.V.#.#.....#.#.#.#.#...#z#.#...#...#.#...#.#...#.#.L.#.#.#
#.#####.#######.#########.###.###.###.#.#.#.###J#.#####.###.###.#.#####.#.###.#.#
#.............#...............#.....A.#.#.......#........o#.............#....u..#
#################################################################################";
        #endregion

        private Dictionary<Point, char> _Map = new Dictionary<Point, char>();
        readonly int Width;
        readonly int Height;
        readonly Point StartLocation;

        public Day18(string input = Input)
        {
            string[] lines = input.SplitLine();
            List<Point> points = new List<Point>();
            Width = lines[0].Length;
            Height = lines.Length;
            for (int x = 0; x < Width; x++)
            {
                for (int y = 0; y < Height; y++)
                {
                    _Map.Add(new Point(x, y), lines[y][x]);
                    if (lines[y][x] == '@')
                        StartLocation = new Point(x, y);
                }
            }
        }

        internal int Part1()
        {
            int totalDistance = ShortedPathForAllKeys(new Dictionary<Point, char>(_Map), StartLocation, 0);

            return totalDistance;
        }

        private static int ShortedPathForAllKeys(Dictionary<Point, char> _Map, Point currentLocation, int distance)
        {
            Dictionary<Point, int> distanceToO = new Dictionary<Point, int>();
            Dictionary<char, int> keyDistances = new Dictionary<char, int>();
            SetDistanceTo(_Map, currentLocation, 0, distanceToO, keyDistances);
            if (keyDistances.Count == 0) return distance;
            int shortestToFinish = int.MaxValue;
            foreach (var item in keyDistances)
            {
                Dictionary<Point, char> replacedMap = new Dictionary<Point, char>(_Map);
                char key = item.Key;
                char door = char.ToUpper(key);
                Point startLocation = new Point();
                foreach (var mapItem in replacedMap.ToArray())
                {
                    if (mapItem.Value == key)
                    {
                        replacedMap[mapItem.Key] = '.';
                        startLocation = mapItem.Key;
                    }
                    else if (mapItem.Value == door)
                    {
                        replacedMap[mapItem.Key] = '.';
                    }
                }
                int thisDist = ShortedPathForAllKeys(replacedMap, startLocation, item.Value + distance);
                if (thisDist < shortestToFinish)
                    shortestToFinish = thisDist;
            }
            return shortestToFinish;
        }

        private static void SetDistanceTo(Dictionary<Point, char> _Map, Point from, int distance, Dictionary<Point, int> distanceToO, Dictionary<char, int> keyDistances)
        {
            if (_Map.TryGetValue(from, out char mapPoint))
            {
                if (char.IsLetter(mapPoint) && char.IsLower(mapPoint))
                {
                    if (!keyDistances.ContainsKey(mapPoint))
                        keyDistances.Add(mapPoint, distance);
                    else if (keyDistances[mapPoint] > distance)
                        keyDistances[mapPoint] = distance;
                }
                if (mapPoint != '@' && mapPoint != '.') return;
                if (!distanceToO.ContainsKey(from) || distanceToO[from] > distance)
                {
                    if (!distanceToO.ContainsKey(from))
                        distanceToO.Add(from, distance);
                    else
                        distanceToO[from] = distance;
                    SetDistanceTo(_Map, from.Left(), distance + 1, distanceToO, keyDistances);
                    SetDistanceTo(_Map, from.Right(), distance + 1, distanceToO, keyDistances);
                    SetDistanceTo(_Map, from.Up(), distance + 1, distanceToO, keyDistances);
                    SetDistanceTo(_Map, from.Below(), distance + 1, distanceToO, keyDistances);
                }
            }
        }

        internal int Part2()
        {
            throw new NotImplementedException();
        }
    }

    [TestClass]
    public class TestDay18
    {
        [TestMethod]
        public void Example1()
        {
            var d = new Day18(@"
#########
#b.A.@.a#
#########");
            Assert.AreEqual(8, d.Part1());
        }

        [TestMethod]
        public void Example2()
        {
            var d = new Day18(@"
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################");
            Assert.AreEqual(86, d.Part1());
        }

        [TestMethod]
        public void Example3()
        {
            var d = new Day18(@"
########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################");
            Assert.AreEqual(132, d.Part1());
        }

        [TestMethod]
        public void Example4()
        {
            var d = new Day18(@"
#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################");
            Assert.AreEqual(136, d.Part1());
        }

        [TestMethod]
        public void Example5()
        {
            var d = new Day18(@"
########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################");
            Assert.AreEqual(81, d.Part1());
        }

        [TestMethod]
        public void Part1()
        {
            Assert.AreEqual(0, new Day18().Part1());
        }
        [TestMethod]
        public void Part2()
        {
            Assert.AreEqual(0, new Day18().Part2());
        }
    }

}
